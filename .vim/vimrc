" ============================================================================ "
" Vundle initialization
" ============================================================================ "

" no vi-compatible
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

" Plugins
Bundle 'gmarik/Vundle.vim'
Bundle 'The-NERD-tree'
"Bundle 'Rykka/riv.vim'
Bundle 'tomtom/tcomment_vim'
Bundle 'pi314/BoshiamyIM'

call vundle#end()           " required
filetype plugin indent on   " required
" ============================================================================ "
" Vundle ok "
" ============================================================================ "

" Encoding settings
set encoding=utf-8
set langmenu=zh_TW.UTF-8
language message zh_TW.UTF-8
set fileformat=unix
set ambiwidth=double

" Show mode on bottom-left
set showmode

" Show command on bottom-right
set showcmd

" Color settings
syntax on
set hlsearch
set bg=dark

" Tab charactor related settings
set expandtab       " changes user pressed TAB to spaces
set tabstop=4       " changes the width of the TAB character
set shiftwidth=4    " >>, <<, == width and automatic indent width
set listchars=tab:>-
set list

" Auto indent
set ai

" Ignore case on searching
set ic

" Show the coordinate of cursor
set ru

" Enable backspace
set bs=2

" Show line numbers
set nu

" Status line
set laststatus=2
set wildmenu

set scrolloff=5

" tell vim not creating {filename}~
set nobackup
set nowritebackup
" tell vim not creating .{filename}.un~
set noundofile

" set fold method as marker
set fdm=marker

" Tabline setting in .vim/plugin/tabline.vim
hi TabLine     ctermfg=black ctermbg=grey     " not active tab page label
hi TabLineSel  ctermfg=grey  ctermbg=black    " active tab page label
hi TabLineFill ctermfg=grey  ctermbg=white    " fill the other place
hi VIMlogo     ctermfg=white ctermbg=blue

" ======== "
" Hot-keys "
" ======== "

" move moving between long wrapped lines
" must use nnoremap = no recursive map
nnoremap k gk
nnoremap j gj

nnoremap tj :tabp<CR>
nnoremap tk :tabn<CR>
nnoremap tt :tabe<SPACE>
nnoremap tp :tabm -1<CR>
nnoremap tn :tabm +1<CR>

" toggle the nerd tree
nnoremap <C-n> :NERDTreeToggle<CR>
inoremap <C-n> <ESC>:NERDTreeToggle<CR>

" Insert a new line in normal mode, I just lazy
nnoremap <CR> o<ESC>

" map these by hand
inoremap <C-h> <BS>
nnoremap <C-h> <BS>

" hot key for macro register q
" Do register Q
nnoremap dq @q

" mappings for iterm2
cnoremap [A <UP>
cnoremap [D <LEFT>
cnoremap [C <RIGHT>
cnoremap [B <DOWN>
inoremap [A <UP>
inoremap [D <LEFT>
inoremap [C <RIGHT>
inoremap [B <DOWN>
nnoremap [A <UP>
nnoremap [D <LEFT>
nnoremap [C <RIGHT>
nnoremap [B <DOWN>

nnoremap <leader><C-l> :syntax sync fromstart<CR>

" BoshiamyIM
set statusline=%<%{BoshiamyIM#Status()}%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
inoremap <expr> ,, BoshiamyIM#ToggleIM()
inoremap <space> <C-R>=BoshiamyIM#SendKey()<CR>
nnoremap <expr> <ESC><ESC> BoshiamyIM#LeaveIM()

"""" My functions!

" brackets
command! -nargs=1 Br call Bracket_replace(<f-args>)
command! -nargs=1 BR call Bracket_replace(<f-args>)

" This function uses mark z
function! Bracket_replace (from_to)
    if len(a:from_to) != 2
        echom "The argument must be two charactors"
        return
    endif

    let l:from = a:from_to[0]
    let l:to = a:from_to[1]

    if l:from == '(' || l:from == ')' || l:from ==# 'b'
        let l:from = '('

    elseif l:from == '[' || l:from == ']'
        let l:from = '['

    elseif l:from == '{' || l:from == '}' || l:from ==# 'B'
        let l:from = '{'

    elseif l:from == '<' || l:from == '>'
        let l:from = '<'

    elseif l:from == '"'
        let l:from = '"'

    elseif l:from == "'"
        let l:from = "'"

    else
        echom 'Unrecognized argument '. l:from
        return

    endif

    if l:to == '(' || l:to == ')' || l:to ==# 'b'
        let l:replacement = '()'

    elseif l:to == '[' || l:to == ']'
        let l:replacement = '[]'

    elseif l:to == '{' || l:to == '}' || l:to ==# 'B'
        let l:replacement = '{}'

    elseif l:to == '<' || l:to == '>'
        let l:replacement = '<>'

    elseif l:to == '"'
        let l:replacement = '""'

    elseif l:to == "'"
        let l:replacement = "''"

    else
        echom 'Unrecognized argument '. l:to
        return

    endif

    """ clear mark z
    execute 'delmarks z'
    execute 'normal di'. l:from
    if l:from ==# '"' || l:from ==# "'"
        execute "normal h"
    else
        execute "normal %"
    endif
    " I am now at left bracket position
    execute 'normal mz'
    execute 'normal u'
    execute 'normal `z'
    if l:from ==# '"' || l:from ==# "'"
        execute 'normal f'. l:from
    else
        execute 'normal %'
    endif
    " I am now at right bracket position
    execute 'normal r'.l:replacement[1]
    execute 'normal `z'
    execute 'normal `zr'.l:replacement[0]

    "echom l:from . l:to

endfunction
